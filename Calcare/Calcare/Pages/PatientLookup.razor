@page "/patientlookup/{AHN?}"

@using System;
@using System.Collections.Generic;

@inject FileManager fileManager;
@inject NavigationManager navigationManager;

<PageTitle>Patient Lookup - Calcare</PageTitle>

<div class="cardbox">
    <p class="title"></p>
    <h1>Patient Information</h1>

    <EditForm Model="@model">
        <DataAnnotationsValidator />

        <label for="Name">Name</label>
        <InputText type="string" @bind-Value="model.Name" placeholder="Name" class="form-control" id="Name" />
        <ValidationMessage For="() => model.Name" />
        
        <label for="Name">Alberta Health Number</label>
        <InputText @bind-Value="model.AHN" class="form-control" id="ahn" />
        <ValidationMessage For="() => model.AHN" />
        
        <label for="Name">Date Of Birth</label>
        <InputText @bind-Value="model.DOB" class="form-control" id="dob" />
        <ValidationMessage For="() => model.DOB" />

        
        <label for="Name">Phone</label>
        <InputText @bind-Value="model.PhoneNumber" class="form-control" id="phone" />
        <ValidationMessage For="() => model.PhoneNumber" />

        <label for="Name">Email</label>
        <InputText @bind-Value="model.Email" class="form-control" id="email" />
        <ValidationMessage For="() => model.Email" />

        <label for="Name">Address</label>
        <InputText @bind-Value="model.Address" class="form-control" id="address" />
        <ValidationMessage For="() => model.Address" />

        <p><button @onclick="HandleUpdateSubmit" id="userbtn">UPDATE</button></p>
    
    </EditForm>

</div>

@foreach (var appointment in appointments)
{
    <div class="card">
        <h5 class="card-header">@appointment.AppointmentStartTime.ToString("yyyy-MM-dd HH:mm")</h5>
        <div class="card-body">
            <h5 class="card-title">@appointment.Doctor</h5>
            <a @onclick="@(() => DeleteAppointment(appointment.AppointmentStartTime.ToString("yyyy-MM-dd"), appointment.AppointmentStartTime.ToString("HH:mm"), appointment.PatientAHN))" class="btn btn-primary">Delete Appointment</a>
        </div>
    </div>
}

<p><button type="submit " id="userbtn" @onclick="CreateAppointment">CREATE APPOINTMENT</button></p>

@code {

    [Parameter]
    public string? AHN { get; set; }

    List<AppointmentData> appointments;
    private string dob;
    public string name;
    private string ahnuser;
    private string userphone;
    private string useremail;
    private string useraddress;

    PatientData patientData = new PatientData();
    private PatientDataForm model = new();
    private Regex _AHNValidationRegex = new Regex(@"^\d{5}-\d{4}$");

    public bool ValidateAHNInput(string input)
    {
        return _AHNValidationRegex.IsMatch(input);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (AHN != null)
        {
            if (!fileManager.PatientExists(AHN))
            {
                Console.WriteLine("Patient with AHN: " + AHN + ", does not exist!");
                return;
            }

            patientData = fileManager.GetPatientData(AHN);
            appointments = patientData.Appointments;

            name = patientData.Name;
            dob = patientData.DOB;
            ahnuser = patientData.AHN;
            userphone = patientData.PhoneNumber;
            useremail = patientData.Email;
            useraddress = patientData.Address;

            model.Name = patientData.Name;
            model.DOB = patientData.DOB;
            model.AHN = patientData.AHN;
            model.PhoneNumber = patientData.PhoneNumber;
            model.Email = patientData.Email;
            model.Address = patientData.Address;
        }
    }

    void DeleteAppointment(string date, string time, string AlbertaHealthCareNumber)
    {
        fileManager.DeleteAppointment(date, time, AlbertaHealthCareNumber);
        appointments = fileManager.GetPatientData(AHN).Appointments;
        StateHasChanged();
    }

    public void HandleUpdateSubmit()
    {
        patientData = fileManager.GetPatientData(AHN);
        patientData.Name = name;
        patientData.DOB = dob;
        patientData.PhoneNumber = userphone;
        patientData.Email = useremail;
        patientData.Address = useraddress;
        fileManager.SetPatientData(patientData.AHN, patientData);
        Console.WriteLine("AHN: " + patientData.Name);
        name = patientData.Name;
        dob = patientData.DOB;
        userphone = patientData.PhoneNumber;
        useremail = patientData.Email;
        useraddress = patientData.Address;

        name = model.Name;
        dob = model.DOB;
        userphone = model.PhoneNumber;
        useremail = model.Email;
        useraddress = model.Address;
    }

    public void CreateAppointment()
    {
        navigationManager.NavigateTo("/calendar/" + AHN);
    }

    public class Appointment
    {
        public DateTime Date { get; set; }
        public string Doctor { get; set; }
        public string Description { get; set; }
    }
}